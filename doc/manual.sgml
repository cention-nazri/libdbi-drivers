<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!-- $Id -->
<book>
  <bookinfo>
    <title>sqlite driver manual</title>
    <subtitle>A libdbi driver using the SQLite embedded database engine</subtitle>
  <author>
      <firstname>Markus</firstname>
      <surname>Hoenicka</surname>
      <affiliation>
	<address><email>markus.hoenicka@mhoenicka.de</email></address>
      </affiliation>
    </author>
    <revhistory>
      <revision>
	<revnumber>0.1</revnumber>
	<date>2002-11-5</date>
      </revision>
    </revhistory>
  </bookinfo>
  <preface>
    <title>Preface</title>
    <para><ulink url="http://libdbi.sourceforge.net">libdbi</ulink> is a database abstraction layer written in C. It implements a framework that can utilize separate driver libraries for specific database servers. The <ulink url="http://libdbi-drivers.sourceforge.net">libdbi-drivers</ulink> project provides 3-rd party drivers for database servers not supported by the libdbi project itself.</para>
    <para>This manual provides information about the sqlite driver. The manual is intended for programmers who write applications linked against libdbi and who want their applications to work with the sqlite driver.</para>
    <para>Questions and comments about the sqlite driver should be sent to the <ulink url="mailto:libdbi-drivers-devel@lists.sourceforge.net">libdbi-drivers-devel</ulink> mailing list. Visit the <ulink url="http://lists.sourceforge.net/lists/listinfo/libdbi-drivers-devel">libdbi-drivers-devel list page</ulink> to subscribe and for further information. Questions and comments about the libdbi library should be sent to the appropriate libdbi mailing list.</para>
    <para>The libdbi-drivers project and the sqlite driver are maintained by <ulink url="mailto:mhoenicka@users.sourceforge.net">Markus Hoenicka</ulink>.</para>
  </preface>
  <chapter>
    <title>Introduction</title>
    <para><ulink url="http://www.sqlite.org">SQLite</ulink> is a smart library that implements an embeddable SQL database engine. No need for an external database server - an application linked against libsqlite can do it all by itself. Of course there are a few limitations of this approach compared to "real" SQL database servers, mostly for massively parallel high-throughput database applications, but on the other hand, installation and administration are a breeze. Your application should support the sqlite driver if one of the following applies:</para>
    <itemizedlist>
      <listitem>
	<para>You want to support potential users of your application who don't have the skills to administer a database server.</para>
      </listitem>
      <listitem>
	<para>You want to offer the simplest possible installation of your application.</para>
      </listitem>
      <listitem>
	<para>You want to let users test-drive your application without the need to fiddle with their production database servers.</para>
      </listitem>
    </itemizedlist>
  </chapter>
  <chapter>
    <title>Installation</title>
    <para>This chapter describes the prerequisites and the procedures to build and install the sqlite driver from the sources.</para>
    <sect1>
      <title>Prerequisites</title>
      <para>The following packages have to be installed on your system:</para>
      <variablelist>
	<varlistentry>
	  <term>libdbi</term>
	  <listitem>
	    <para>This library provides the framework of the database abstraction layer which can utilize the sqlite driver to perform database operations. The download page as well as the mailing lists with bug reports and patches are accessible at <ulink url="http://sourceforge.net/projects/libdbi">sourceforge.net/projects/libdbi</ulink>. The current version of the sqlite driver was built for libdbi-0.6.6 (patches published in the libdbi mailing list are required for proper operation).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>sqlite</term>
	  <listitem>
	    <para>This library implements the embeddable database engine. Find the most recent release at <ulink url="http://www.sqlite.org">www.sqlite.org</ulink>. The current version of the sqlite driver was tested with SQLite version 2.7.2.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>
    <sect1>
      <title>Build and install the sqlite driver</title>
      <para>First you have to unpack the libdbi-drivers archive in a suitable directory. Unpacking will create a new subdirectory <filename class="directory">libdbi-drivers-0.1</filename>:</para>
      <screen><prompt>$ </prompt><userinput>tar -xzf libdbi-drivers-0.1.tar.gz</userinput></screen>
      <para>The libdbi-drivers project currently consists of a single driver, but the build system is set up to accept additional drivers at a later time. Therefore you have to tell configure explicitly that you want to build the sqlite driver:</para>
      <screen><prompt>$ </prompt><userinput>cd libdbi-drivers</userinput></screen>
      <screen><prompt>$ </prompt><userinput>./configure --with-sqlite</userinput></screen>
      <para>Run <command>./configure --help</command> to find out about additional options.</para>
      <para>Then build the driver with the command:</para>
      <screen><prompt>$ </prompt><userinput>make</userinput></screen>
      <note>
	<para>Please note that you may have to invoke <command>gmake</command>, the GNU version of make, on some systems.</para>
      </note>
      <para>Then install the driver with the command (you'll need root permissions to do this):</para>
      <screen><prompt>$ </prompt><userinput>make install</userinput></screen>
      <para>To test the operation of the newly installed driver, use the command:</para>
      <screen><prompt>$ </prompt><userinput>make check</userinput></screen>
      <para>This command creates and runs a variant of the test program supplied with libdbi. The test will work only with the sqlite driver, so even if other drivers are installed on your system, you have to select the sqlite driver when asked. The program will also ask for a database name. This can be any name that is a valid filename on your system. Finally it will ask for a data directory. This is the directory that is used to create the test database. Needless to say that you need write access to that directory. If you accept the default ".", the database will be created in the <filename class="directory">tests</filename> subdirectory.</para>
    </sect1>
  </chapter>
  <chapter>
    <title>Driver options</title>
    <para>Your application has to initialize libdbi drivers by setting some driver options with the <function>dbi_conn_set_option</function> and the <function>dbi_conn_set_option_numeric</function> library functions. In contrast to the drivers shipped with libdbi, the sqlite driver supports only the following options (the other common options are meaningless due to the embedded nature of the database engine):</para>
    <variablelist>
      <varlistentry>
	<term>dbname</term>
	<listitem>
	  <para>The name of the database you want to work with. As a SQLite database corresponds to one file in your filesystem, <varname>dbname</varname> can be any legal filename. If the database/file doesn't exist when you first try to access it, SQLite will create it on the fly.</para>
	  <para>It is important to understand that the full path of the database is composed of <varname>sqlite-dbdir</varname> and <varname>dbname</varname>. Therefore <varname>dbname</varname> should not contain the full path of a file, but just the name.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>sqlite-dbdir</term>
	<listitem>
	  <para>This is the directory that contains all sqlite databases. Use the full path please.</para>
	  <note>
	    <para>It is necessary to keep all sqlite databases in one directory to make it possible to list all existing databases through the libdbi API.</para>
	  </note>
	</listitem>
      </varlistentry>
    </variablelist>
  </chapter>
  <chapter>
    <title>Peculiarities you should know about</title>
    <para>This chapter lists known peculiarities of the sqlite driver. This includes SQLite features that differ from what you know from the other database servers supported by libdbi, and it includes features and misfeatures introduced by the sqlite driver. It is the intention of the driver author to reduce the number of misfeatures in future releases if possible.</para>
    <sect1>
      <title>SQLite (mis)features</title>
      <para>As the SQLite package is constantly being improved, you should refer to the original documentation about the SQL features it <ulink url="http://www.sqlite.org/lang.html">supports</ulink> and about the SQL features it <ulink url="http://www.sqlite.org/omitted.html">doesn't support</ulink>.</para>
      <para>One noticeable difference between SQLite and other SQL database engines is that the former is typeless. All data are stored as strings, and you can insert any type of data into any field. While the SQLite author has good reasons for this feature, it is an obstacle to using the strongly typed retrieval functions of libdbi. The only way out is to declare the field types in a <command>CREATE TABLE</command> statement just as you would with PostgreSQL (SQLite is somewhat modelled after PostgreSQL so I chose to support most of the PostgreSQL data types). As an example, the following statement is perfectly fine with SQLite, but not with the sqlite driver:</para>
      <screen><userinput>CREATE TABLE foo (a,b,c)</userinput></screen>
      <para>However, the following statement is fine with SQLite, the sqlite driver, and just about any other SQL database server:</para>
      <screen><userinput>CREATE TABLE foo (a INTEGER,b TEXT, c VARCHAR(64))</userinput></screen>
      <para>Another difference is the lack of access control on the database engine level. Most SQL database servers implement some mechanisms to restrict who is allowed to fiddle with the databases and who is not. As SQLite uses regular files to store its databases, all available access control is on the filesystem level. Of course there is no SQL interface to this kind of access control, but <command>chmod</command> and <command>chown</command> are your friends.</para>
      <para>SQLite appears to implement row and column counters as C long int values. This limits the maximum number of rows somewhat compared to other SQL database engines.</para>
    </sect1>
    <sect1>
      <title>sqlite driver misfeatures</title>
      <para>And now we have to discuss how successful the sqlite driver is in squeezing the SQLite idea of a database engine into the libdbi framework which was shaped after MySQL and PostgreSQL. Keep in mind that the limitations mentioned here are not intrinsic, that is a sufficient amount of coding might fix these problems eventually.</para>
      <itemizedlist>
	<listitem>
	  <para>The sqlite driver has not been tested for memory leaks yet. It may leak memory like hell.</para>
	</listitem>
	<listitem>
	  <para>The typeless nature of SQLite has some nasty consequences. The sqlite driver takes great care to reconstruct the type of a field that you request in a query, but this isn't always successful. Some of the functions that SQLite supports work both on numeric and text data. The sqlite driver currently cannot deduce the field type correctly as it would have to check all arguments of each function. Instead the sqlite driver makes a few assumptions that may be right or wrong in a given case. The affected functions are <function>coalesce(X,Y,...)</function>, <function>max(X)</function>, <function>min(X)</function>, and <function>count(X)</function>.</para>
	</listitem>
	<listitem>
	  <para>The sqlite driver currently assumes that the directory separator of your filesystem is a slash (/). This may be wrong on your particular system. It is not a problem for Windows systems as long as the sqlite driver is built with the Cygwin tools (see <filename>README.win32</filename>).</para>
	  <note>
	    <para>Building the sqlite driver on Windows/Cygwin has not been tested yet, but it uses the same procedure as the other libdbi drivers. Chances are that it works.</para>
	  </note>
	</listitem>
	<listitem>
	  <para>Listing databases with the <function>dbi_conn_get_db_list()</function> libdbi function currently returns all files in the database directory, regardless of whether they are actually databases.</para>
	</listitem>
	<listitem>
	  <para>Listing tables with the <function>dbi_conn_get_table_list()</function> libdbi function currently returns only permanent tables. Temporary tables are ignored.</para>
	</listitem>
	<listitem>
	  <para>The sqlite driver assumes that table and field names do not exceed 128 characters in length, including the trailing \0. I don't know whether SQLite internally has such a limit or not (both MySQL and PostgreSQL have a lower limit).</para>
	</listitem>
	<listitem>
	  <para>In a few cases, the sqlite driver expects you to type SQL keywords in all lowercase or all uppercase, but not mixed. This holds true for the 'from' in a SELECT statement. Type it either as 'from' or as 'FROM', but refrain from using 'fRoM' or other funny mixtures of uppercase and lowercase. Most other database engines treat the keywords as case-insensitive and would accept all variants.</para>
	</listitem>
      </itemizedlist>
    </sect1>
  </chapter>
</book>